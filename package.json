{
  "name": "atom-typescript",
  "version": "14.4.0",
  "main": "./loader.js",
  "bundle": "./dist/main.js",
  "preferGlobal": true,
  "description": "The only TypeScript plugin you will ever need.",
  "atomTestRunner": "./node_modules/atom-ts-spec-runner/runner.js",
  "activationHooks": [
    "language-typescript:grammar-used"
  ],
  "activationCommands": {
    "atom-workspace": [
      "typescript:initialize-config",
      "typescript:activate"
    ]
  },
  "scripts": {
    "tsc": "tsc -p ./lib",
    "dev": "cross-env NODE_ENV=development parcel watch --target bundle lib/main/atomts.ts",
    "build": "npm run gen-config-types && cross-env NODE_ENV=production parcel build --target bundle lib/main/atomts.ts",
    "prettier": "prettier --write \"./{lib,scripts,spec}/**/*.{ts,tsx}\"",
    "prettier-check": "prettier --check \"./{lib,scripts,spec}/**/*.{ts,tsx}\"",
    "typecheck": "tsc --noEmit -p ./lib && tsc --noEmit -p ./scripts && tsc --noEmit -p ./spec",
    "lint": "tslint --project ./lib && tslint --project ./spec",
    "test": "npm run typecheck && npm run lint && npm run prettier-check",
    "gen-config-types": "node scripts/typed-config.js lib/typings/atom-config.d.ts && prettier --write lib/typings/atom-config.d.ts"
  },
  "engines": {
    "atom": ">=1.31.0 <2.0.0",
    "node": "*"
  },
  "configSchema": {
    "unusedAsInfo": {
      "title": "Show unused values with severity info",
      "description": "Show unused values with severity 'info' instead of 'error'",
      "type": "boolean",
      "default": true,
      "order": 90
    },
    "checkAllFilesOnSave": {
      "title": "Check all project files on save",
      "description": "Enabling this will report all problems in the current project when the current file is saved (this can be slow if the project is big!).",
      "type": "boolean",
      "default": "false",
      "order": 92
    },
    "autocompletionSuggestionPriority": {
      "description": "Snippets etc have priority of 1. Requires Atom restart",
      "type": "integer",
      "default": 3,
      "order": 20
    },
    "autocompletionInclusionPriority": {
      "description": "Inclusion priority as described in autocomplete-plus docs <https://github.com/atom/autocomplete-plus/wiki/Provider-API>. Requires Atom restart",
      "type": "integer",
      "default": 3,
      "order": 20.1
    },
    "autocompletionExcludeLowerPriority": {
      "description": "Exclude providers with priority lower than inclusion priority. Set to true to exclude builtin suggestions. Requires Atom restart",
      "type": "boolean",
      "default": false,
      "order": 20.2
    },
    "autocompletionUseFuzzyFilter": {
      "description": "Use fuzzy-filter, like the one used by autocomplete-plus by default. If disabled, use a custom strict one",
      "type": "boolean",
      "default": true,
      "order": 20.3
    },
    "autocompletionStrictFilterIgnoreCase": {
      "description": "When using strict filter, include suggestions with mismatching case",
      "type": "boolean",
      "default": true,
      "order": 20.4
    },
    "autocompletionStrictFilterLongestMatchFirst": {
      "description": "When using strict filter, offer the longest match first; otherwise, offer the shortest match first",
      "type": "boolean",
      "default": true,
      "order": 20.5
    },
    "locale": {
      "title": "TypeScript locale",
      "description": "Use this locale for TypeScript messages (e.g. 'de'). Requires Atom restart",
      "type": "string",
      "default": "en",
      "order": 50
    },
    "preferBuiltinTooltips": {
      "title": "Prefer built-in type tooltips",
      "description": "Use built-in tooltips for displaying type information instead of Atom-IDE ones (if available); Change requires Atom restart",
      "type": "boolean",
      "default": false,
      "order": 55
    },
    "preferBuiltinSigHelp": {
      "title": "Prefer built-in signature help tooltips",
      "description": "Use built-in tooltips for displaying signature help instead of Atom-IDE ones (if available); Change requires Atom restart",
      "type": "boolean",
      "default": false,
      "order": 56
    },
    "preferBuiltinBusySignal": {
      "title": "Prefer built-in busy status indicator",
      "description": "Use built-in busy status indicator instead of Atom-IDE one (if available); Change requires Atom restart",
      "type": "boolean",
      "default": false,
      "order": 57
    },
    "preferBuiltinOccurrenceHighlight": {
      "title": "Prefer built-in occurrence highligting",
      "description": "Use built-in occurrence highlights instead of Atom-IDE one (if available); Change requires Atom restart",
      "type": "boolean",
      "default": false,
      "order": 58
    },
    "disableAtomIdeDefinitions": {
      "title": "Disable Atom-IDE Definitions interface",
      "description": "Atom-IDE will revert to using Hyperclick for go-to-definition; Atom-Typescript will be able to track position history and return-from-declaration command will work; you will lose fancy previews on ctrl/cmd+mouseover though; Change requires Atom restart",
      "type": "boolean",
      "default": false,
      "order": 59
    },
    "buildStatusTimeout": {
      "title": "Build status visibility timeout",
      "description": "How long to show successful build status, in seconds. Failed status will be shown indefinitely. Negative means forever",
      "type": "number",
      "default": "10",
      "order": 60
    },
    "getErrDebounceTimeout": {
      "title": "getErr Debounce Timeout",
      "description": "During on-change check, how long to wait for new changes until checking for errors, in ms",
      "type": "number",
      "default": "150",
      "order": 65
    },
    "occurrenceHighlightDebounceTimeout": {
      "title": "Occurrence Highlight Debounce Timeout",
      "description": "How long to wait before showing ocurrence highlights, in ms; low values may cause slowdowns on large projects",
      "type": "number",
      "default": "300",
      "order": 66
    },
    "showSemanticView": {
      "title": "Show semantic view",
      "description": "Show semantic view (outline) for typescript content",
      "type": "boolean",
      "default": false,
      "order": 70
    },
    "tooltipDelay": {
      "title": "Type tooltip delay",
      "description": "Delay before type tooltip is shown on mouse hover in milliseconds",
      "type": "integer",
      "default": 100,
      "order": 60
    },
    "tooltipPosition": {
      "title": "Built-in type tooltip position",
      "description": "Above or below cursor position",
      "type": "string",
      "enum": [
        "top",
        "bottom"
      ],
      "default": "bottom",
      "order": 61
    },
    "sigHelpPosition": {
      "title": "Built-in signature help tooltip position",
      "description": "Above or below cursor position",
      "type": "string",
      "enum": [
        "top",
        "bottom"
      ],
      "default": "top",
      "order": 62
    },
    "sigHelpDisplayOnChange": {
      "title": "Display signature help tooltips on keystroke",
      "description": "Will automatically show signature help (if any) after `(`, `,`, `<` keystroke",
      "type": "boolean",
      "default": true,
      "order": 63
    },
    "autocompleteParens": {
      "title": "Autocomplete parentheses",
      "description": "Automatically insert parentheses after autocompleting functions and methods",
      "type": "boolean",
      "default": false,
      "order": 65
    },
    "includeCompletionsForModuleExports": {
      "description": "(EXPERIMENTAL) If enabled, TypeScript will search through all external modules' exports and add them to the completions list. This affects lone identifier completions but not completions on the right hand side of `obj.`.",
      "type": "boolean",
      "default": false,
      "order": 66
    },
    "quotePreference": {
      "type": "string",
      "enum": [
        "auto",
        "double",
        "single"
      ],
      "default": "auto",
      "order": 67
    },
    "importModuleSpecifierEnding": {
      "type": "string",
      "description": "Determines whether we import `foo/index.ts` as \"foo\", \"foo/index\", or \"foo/index.js\"",
      "enum": [
        "auto",
        "minimal",
        "index",
        "js"
      ],
      "default": "auto",
      "order": 68
    },
    "importModuleSpecifierPreference": {
      "type": "string",
      "enum": [
        "auto",
        "relative",
        "non-relative",
        "shortest",
        "project-relative"
      ],
      "default": "auto",
      "order": 69
    },
    "tsdkPath": {
      "title": "Path to default TypeScript SDK",
      "description": "TypeScript SDK found at the specified path will be preferred over the bundled one if TypeScript is not installed in node_modules as a project dependency. Ignored when empty",
      "type": "string",
      "default": "",
      "order": 70
    },
    "ignoredDiagnosticCodes": {
      "title": "Ignore diagnostics",
      "description": "List of diagnostic codes to ignore, comma-separated. Refer to [diagnosticMessages.json](https://github.com/Microsoft/TypeScript/blob/master/src/compiler/diagnosticMessages.json) for diagnostic codes",
      "type": "array",
      "items": {
        "type": "string"
      },
      "default": [],
      "order": 80
    },
    "ignoreUnusedSuggestionDiagnostics": {
      "title": "Ignore 'unused parameter/variable/etc' suggestion diagnostics",
      "description": "When `noUnusedLocals` etc are disabled, TypeScript 2.9 and above still report this as 'suggestions'. This option will filter these out",
      "type": "boolean",
      "default": "false",
      "order": 100
    },
    "ignoreNonSuggestionSuggestionDiagnostics": {
      "title": "Ignore suggestion diagnostics that are not actionable suggestions",
      "description": "TypeScript server reports some error-type diagnostics on the suggestion channel. Enabling this option will suppress those",
      "type": "boolean",
      "default": "false",
      "order": 105
    },
    "ignoredSuggestionDiagnostics": {
      "title": "Ignore suggestion diagnostics",
      "description": "List of suggestion-type diagnostic codes to ignore, comma-separated. Refer to [diagnosticMessages.json](https://github.com/Microsoft/TypeScript/blob/master/src/compiler/diagnosticMessages.json) for diagnostic codes",
      "type": "array",
      "items": {
        "type": "string"
      },
      "default": [],
      "order": 110
    },
    "suppressAllDiagnostics": {
      "title": "Suppress all diagnostics",
      "description": "The package will not report any problems with TypeScript. Use only if you know what you are doing",
      "type": "boolean",
      "default": "false",
      "order": 120
    },
    "tsFileExtensions": {
      "title": "TypeScript file extensions",
      "description": "Comma-separated list of TypeScript file extensions; may require Atom restart to take effect; DO NOT EDIT unless you know what you are doing",
      "type": "array",
      "items": {
        "type": "string"
      },
      "default": [
        ".ts",
        ".tst",
        ".tsx"
      ],
      "order": 130
    },
    "jsFileExtensions": {
      "title": "JavaScript file extensions",
      "description": "Comma-separated list of JavaScript file extensions; may require Atom restart to take effect; DO NOT EDIT unless you know what you are doing",
      "type": "array",
      "items": {
        "type": "string"
      },
      "default": [
        ".js",
        ".jst",
        ".jsx",
        ".mjs",
        ".cjs"
      ],
      "order": 140
    },
    "extensionsFromGrammars": {
      "title": "Determine file extensions from Atom grammar settings",
      "description": "Pull recognized file extensions from grammar definitions matching the syntax scopes defined below",
      "type": "boolean",
      "default": true,
      "order": 145
    },
    "tsSyntaxScopes": {
      "title": "TypeScript syntax scopes",
      "description": "Comma-separated list of TypeScript syntax scopes; may require Atom restart to take effect; DO NOT EDIT unless you know what you are doing",
      "type": "array",
      "items": {
        "type": "string"
      },
      "default": [
        "source.ts",
        "source.tsx",
        "typescript"
      ],
      "order": 150
    },
    "jsSyntaxScopes": {
      "title": "JavaScript syntax scopes",
      "description": "Comma-separated list of JavaScript syntax scopes; may require Atom restart to take effect; DO NOT EDIT unless you know what you are doing",
      "type": "array",
      "items": {
        "type": "string"
      },
      "default": [
        "source.js",
        "source.jsx",
        "javascript"
      ],
      "order": 160
    },
    "allowJS": {
      "title": "Enable Atom-Typescript for JavaScript files (experimental)",
      "description": "Passes JS files to TypeScript server; Most likely need allowJS: true and checkJS: true in tsconfig",
      "type": "boolean",
      "default": false,
      "order": 170
    },
    "tsserverInstancePerTsconfig": {
      "title": "Spawn separate tsserver instance for each tsconfig.json",
      "description": "This option helps avoid confusion when multiple projects are referincing the same file, but can prevent external definition files (d.ts) from reloading when changed. Changing this option requires Atom restart.",
      "type": "boolean",
      "default": false,
      "order": 180
    },
    "longLineLength": {
      "title": "Single line length that triggers semantic view large file optimizations",
      "description": "Will throttle semantic view updates on the file if any one line is longer than this number; value of 0 means getting the value from the corresponding setting in linter-ui-default, or 4000 if that is unavaliable",
      "type": "integer",
      "default": 0,
      "order": 200
    },
    "largeFileLineCount": {
      "title": "Number of lines that triggers semantic view large file optimizations",
      "description": "Will throttle semantic view updates on the file if it has more lines than this number; value of 0 means getting the value from the corresponding setting in linter-ui-default, or 500 if that is unavaliable",
      "type": "integer",
      "default": 0,
      "order": 210
    },
    "largeFileNoFollowCursor": {
      "title": "Disable semantic view focus following text cursor on large files",
      "description": "If a file is large, as defined by previous options, don't update semantic view focus on text cursor moves; use typescript:reveal-in-semantic-view command instead",
      "type": "boolean",
      "default": false,
      "order": 220
    }
  },
  "deserializers": {
    "atomts-semantic-view/SemanticView": "deserializeSemanticView"
  },
  "consumedServices": {
    "linter-indie": {
      "versions": {
        "^2.0.0": "consumeLinter"
      }
    },
    "status-bar": {
      "versions": {
        "^1.0.0": "consumeStatusBar"
      }
    },
    "datatip": {
      "versions": {
        "0.1.0": "consumeDatatipService"
      }
    },
    "signature-help": {
      "versions": {
        "0.1.0": "consumeSignatureHelp"
      }
    },
    "atom-ide-busy-signal": {
      "versions": {
        "0.1.0": "consumeBusySignal"
      }
    }
  },
  "providedServices": {
    "autocomplete.provider": {
      "versions": {
        "2.0.0": "provideAutocomplete"
      }
    },
    "hyperclick": {
      "versions": {
        "0.1.0": "provideHyperclick"
      }
    },
    "intentions:list": {
      "versions": {
        "1.0.0": "provideIntentions"
      }
    },
    "intentions:highlight": {
      "versions": {
        "1.0.0": "provideIntentionsHighlight"
      }
    },
    "code-actions": {
      "versions": {
        "0.1.0": "provideCodeActions"
      }
    },
    "find-references": {
      "versions": {
        "0.1.0": "provideReferences"
      }
    },
    "outline-view": {
      "versions": {
        "0.1.0": "provideOutlines"
      }
    },
    "definitions": {
      "versions": {
        "0.1.0": "provideDefinitions"
      }
    },
    "code-highlight": {
      "versions": {
        "0.1.0": "provideCodeHighlight"
      }
    }
  },
  "homepage": "https://github.com/TypeStrong/atom-typescript",
  "repository": {
    "type": "git",
    "url": "https://github.com/TypeStrong/atom-typescript.git"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/TypeStrong/atom-typescript/issues"
  },
  "dependencies": {
    "typescript": "^4.2.3"
  },
  "devDependencies": {
    "@parcel/transformer-typescript-tsc": "^2.0.0-beta.2",
    "@types/atom": "^1.40.10",
    "@types/byline": "^4.2.32",
    "@types/chai": "^4.2.15",
    "@types/fs-plus": "^3.0.1",
    "@types/fuzzaldrin": "^2.1.3",
    "@types/lodash": "^4.14.168",
    "@types/mocha": "^8",
    "@types/node": "^12.12.50",
    "@types/resolve": "^1.20.0",
    "atom-ide-base": "^2.4.0",
    "atom-package-deps": "^7",
    "atom-select-list": "^0.8.0",
    "atom-ts-spec-runner": "^1.1.1",
    "atom-ts-transpiler": "^1.5.3",
    "byline": "^5.0.0",
    "chai": "^4.3.4",
    "cross-env": "7.0.3",
    "etch": "^0.14.1",
    "fs-plus": "^3.1.1",
    "fuzzaldrin": "^2.1.0",
    "jsonc-parser": "^3.0.0",
    "lodash": "^4.17.21",
    "parcel": "^2.0.0-beta.2",
    "prettier": "^2.3.2",
    "resolve": "^1.20.0",
    "tslib": "^2.1.0",
    "tslint": "^6.1.3",
    "tslint-use-atom-disposables": "0.0.1",
    "typescript-tslint-plugin": "1.0.1"
  },
  "package-deps": [
    [
      {
        "name": "linter"
      },
      {
        "name": "atom-ide-ui"
      }
    ]
  ],
  "targets": {
    "bundle": {
      "context": "electron-renderer",
      "engines": {
        "electron": ">=5.x"
      },
      "includeNodeModules": {
        "atom": false,
        "electron": false,
        "typescript": false
      },
      "outputFormat": "commonjs",
      "isLibrary": true
    }
  },
  "atomTranspilers": [
    {
      "transpiler": "atom-ts-transpiler",
      "glob": "{!(node_modules)/**/,}*.ts?(x)",
      "options": {
        "compilerOptions": {
          "target": "es2017",
          "module": "commonjs"
        },
        "cacheKeyFiles": [],
        "verbose": false
      }
    }
  ],
  "keywords": [
    "typescript",
    "javascript",
    "html"
  ]
}

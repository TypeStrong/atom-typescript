# This file is generated by `scripts/grammar.js`
# Last generated: Tue, 25 Oct 2016 19:42:18 GMT
name: "TypeScriptReact"
scopeName: "source.tsx"
fileTypes: [
  "tsx"
]
uuid: "805375ec-d614-41f5-8993-5843fe63ea82"
repository:
  expression:
    patterns: [
      {
        comment: "Match Angular 2 Component html templates"
        begin: "(?:(?<=^|\\stemplate:)|(?<=/\\*\\* @html \\*/))\\s*(`)"
        beginCaptures:
          "1":
            name: "name: string.template.ts"
        end: "(?<!\\\\)`"
        endCaptures:
          "0":
            name: "name: string.template.ts"
        patterns: [
          {
            include: "text.html.basic"
          }
        ]
      }
      {
        comment: "Match ES6 \"import from\" syntax"
        match: "\\b(import)\\b.*\\b(from)\\b\\s+((['\"]).*\\4)"
        captures:
          "1":
            name: "keyword.other.ts"
          "2":
            name: "keyword.other.ts"
          "3":
            name: "es6import.path.string.quoted"
      }
      {
        comment: "Match import = require"
        match: "\\b(import)\\s+([\\p{L}\\p{Nl}$_][\\p{L}\\p{Nl}$\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*)\\s*=\\s*(require)\\s*\\((.*)\\)"
        captures:
          "1":
            name: "keyword.other.ts"
          "2":
            name: "variable.type.ts"
          "3":
            name: "keyword.other.ts"
          "4":
            name: "require.path.string.quoted"
      }
      {
        comment: "Match <amd-module"
        match: "(\\/\\/\\/\\s*<amd-module\\s*name\\s*=)(.*)(\\/>)"
        captures:
          "1":
            name: "keyword.other.ts"
          "2":
            name: "amd.path.string.quoted"
          "3":
            name: "keyword.other.ts"
      }
      {
        comment: "Match <amd-dependency"
        match: "(\\/\\/\\/\\s*<amd-dependency\\s*path\\s*=)(.*)(\\/>)"
        captures:
          "1":
            name: "keyword.other.ts"
          "2":
            name: "amd.path.string.quoted"
          "3":
            name: "keyword.other.ts"
      }
      {
        comment: "Match full triple slash reference comments"
        match: "(\\/\\/\\/\\s*<reference\\s*path\\s*=)(.*)(\\/>)"
        captures:
          "1":
            name: "keyword.other.ts"
          "2":
            name: "reference.path.string.quoted"
          "3":
            name: "keyword.other.ts"
      }
      {
        comment: "Match debugger statement"
        match: "\\b(debugger)\\b"
        captures:
          "1":
            name: "keyword.debugger.ts"
      }
      {
        include: "#jsx"
      }
    ]
  cast:
    patterns: [
      {
        include: "#jsx"
      }
    ]
  "jsx-tag-attributes":
    patterns: [
      {
        include: "#jsx-tag-attribute-name"
      }
      {
        include: "#jsx-tag-attribute-assignment"
      }
      {
        include: "#jsx-string-double-quoted"
      }
      {
        include: "#jsx-string-single-quoted"
      }
      {
        include: "#jsx-evaluated-code"
      }
    ]
  "jsx-tag-attribute-name":
    name: "meta.tag.attribute-name.tsx"
    match: '''
      (?x)
        \\s*
        ([_$a-zA-Z][-$\\w]*)
        (?=\\s|=|/?>|/\\*|//)
    '''
    captures:
      "1":
        name: "entity.other.attribute-name.tsx"
  "jsx-tag-attribute-assignment":
    name: "keyword.operator.assignment.tsx"
    match: "=(?=\\s*(?:'|\"|{|/\\*|//|\\n))"
  "jsx-string-double-quoted":
    name: "string.quoted.jsxAttributeValue.quoted.double.tsx"
    begin: "\""
    end: "\""
    beginCaptures:
      "0":
        name: "punctuation.definition.string.jsxAttributeValue.begin.tsx"
    endCaptures:
      "0":
        name: "punctuation.definition.string.jsxAttributeValue.end.tsx"
    patterns: [
      {
        include: "#jsx-attributeValue-entities"
      }
    ]
  "jsx-string-single-quoted":
    name: "string.quoted.jsxAttributeValue.quoted.single.tsx"
    begin: "'"
    end: "'"
    beginCaptures:
      "0":
        name: "punctuation.definition.string.jsxAttributeValue.begin.tsx"
    endCaptures:
      "0":
        name: "punctuation.definition.string.jsxAttributeValue.end.tsx"
    patterns: [
      {
        include: "#jsx-attributeValue-entities"
      }
    ]
  "jsx-entities":
    patterns: [
      {
        name: "constant.character.entity.tsx"
        match: "(&)([a-zA-Z0-9]+|#[0-9]+|#x[0-9a-fA-F]+)(;)"
        captures:
          "1":
            name: "punctuation.definition.entity.tsx"
          "3":
            name: "punctuation.definition.entity.tsx"
      }
      {
        name: "invalid.illegal.bad-ampersand.tsx"
        match: "&"
      }
    ]
  "jsx-attributeValue-entities":
    patterns: [
      {
        name: "constant.character.entity.jsxAttributeValue.tsx"
        match: "(&)([a-zA-Z0-9]+|#[0-9]+|#x[0-9a-fA-F]+)(;)"
        captures:
          "1":
            name: "punctuation.definition.entity.jsxAttributeValue.tsx"
          "3":
            name: "punctuation.definition.entity.jsxAttributeValue.tsx"
      }
      {
        name: "invalid.illegal.bad-ampersand.jsxAttributeValue.tsx"
        match: "&"
      }
    ]
  "jsx-evaluated-code":
    name: "meta.embedded.expression.tsx"
    begin: "{"
    end: "}"
    beginCaptures:
      "0":
        name: "punctuation.section.embedded.begin.tsx"
    endCaptures:
      "0":
        name: "punctuation.section.embedded.end.tsx"
    patterns: [
      {
        include: "#expression"
      }
    ]
  "jsx-tag-attributes-illegal":
    name: "invalid.illegal.attribute.tsx"
    match: "\\S+"
  "jsx-tag-without-attributes":
    name: "meta.tag.without-attributes.tsx"
    begin: "(<)\\s*([_$a-zA-Z][-$\\w.]*(?<!\\.|-))\\s*(>)"
    end: "(</)\\s*([_$a-zA-Z][-$\\w.]*(?<!\\.|-))\\s*(>)"
    beginCaptures:
      "1":
        name: "punctuation.definition.tag.begin.tsx"
      "2":
        name: "entity.name.tag.tsx"
      "3":
        name: "punctuation.definition.tag.end.tsx"
    endCaptures:
      "1":
        name: "punctuation.definition.tag.begin.tsx"
      "2":
        name: "entity.name.tag.tsx"
      "3":
        name: "punctuation.definition.tag.end.tsx"
    contentName: "meta.jsx.children.tsx"
    patterns: [
      {
        include: "#jsx-children"
      }
    ]
  "jsx-tag-in-expression":
    begin: '''
      (?x)
        (?<=[({\\[,?=>]|&&|\\|\\||\\?|\\Wreturn|^return|\\Wdefault|^)\\s*
        (?!(<)\\s*([_$a-zA-Z][-$\\w.]*(?<!\\.|-))\\s*(>)) #look ahead is not start of tag without attributes
        (?!<\\s*[_$[:alpha:]][_$[:alnum:]]*((\\s+extends\\s+[^=>])|,)) # look ahead is not type parameter of arrow
        (?=(<)\\s*
        ([_$a-zA-Z][-$\\w.]*(?<!\\.|-))
        (?=\\s+(?!\\?)|/?>))
    '''
    end: "(/>)|(?:(</)\\s*([_$a-zA-Z][-$\\w.]*(?<!\\.|-))\\s*(>))"
    endCaptures:
      "0":
        name: "meta.tag.tsx"
      "1":
        name: "punctuation.definition.tag.end.tsx"
      "2":
        name: "punctuation.definition.tag.begin.tsx"
      "3":
        name: "entity.name.tag.tsx"
      "4":
        name: "punctuation.definition.tag.end.tsx"
    patterns: [
      {
        include: "#jsx-tag"
      }
    ]
  "jsx-child-tag":
    begin: '''
      (?x)
        (?=(<)\\s*
        ([_$a-zA-Z][-$\\w.]*(?<!\\.|-))
        (?=\\s+(?!\\?)|/?>))
    '''
    end: "(/>)|(?:(</)\\s*([_$a-zA-Z][-$\\w.]*(?<!\\.|-))\\s*(>))"
    endCaptures:
      "0":
        name: "meta.tag.tsx"
      "1":
        name: "punctuation.definition.tag.end.tsx"
      "2":
        name: "punctuation.definition.tag.begin.tsx"
      "3":
        name: "entity.name.tag.tsx"
      "4":
        name: "punctuation.definition.tag.end.tsx"
    patterns: [
      {
        include: "#jsx-tag"
      }
    ]
  "jsx-tag":
    name: "meta.tag.tsx"
    begin: '''
      (?x)
        (?=(<)\\s*
        ([_$a-zA-Z][-$\\w.]*(?<!\\.|-))
        (?=\\s+(?!\\?)|/?>))
    '''
    end: "(?=(/>)|(?:(</)\\s*([_$a-zA-Z][-$\\w.]*(?<!\\.|-))\\s*(>)))"
    patterns: [
      {
        begin: '''
          (?x)
            (<)\\s*
            ([_$a-zA-Z][-$\\w.]*(?<!\\.|-))
            (?=\\s+(?!\\?)|/?>)
        '''
        beginCaptures:
          "1":
            name: "punctuation.definition.tag.begin.tsx"
          "2":
            name: "entity.name.tag.tsx"
        end: "(?=[/]?>)"
        patterns: [
          {
            include: "#comment"
          }
          {
            include: "#jsx-tag-attributes"
          }
          {
            include: "#jsx-tag-attributes-illegal"
          }
        ]
      }
      {
        begin: "(>)"
        beginCaptures:
          "1":
            name: "punctuation.definition.tag.end.tsx"
        end: "(?=</)"
        contentName: "meta.jsx.children.tsx"
        patterns: [
          {
            include: "#jsx-children"
          }
        ]
      }
    ]
  "jsx-tag-invalid":
    name: "invalid.illegal.tag.incomplete.tsx"
    match: "<\\s*>"
  "jsx-children":
    patterns: [
      {
        include: "#jsx-tag-without-attributes"
      }
      {
        include: "#jsx-child-tag"
      }
      {
        include: "#jsx-tag-invalid"
      }
      {
        include: "#jsx-evaluated-code"
      }
      {
        include: "#jsx-entities"
      }
    ]
  jsx:
    patterns: [
      {
        include: "#jsx-tag-without-attributes"
      }
      {
        include: "#jsx-tag-in-expression"
      }
      {
        include: "#jsx-tag-invalid"
      }
    ]